{"version":3,"sources":["Components/Header/icona.png","Components/Header/cina2.png","Components/Main/cina.jpeg","Components/Header/Header.js","Components/Main/Main.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","class","src","logo","height","cina2","Main","state","textUp","textBottom","onChangeHandler","bind","event","testo","target","value","dove","name","this","setState","className","type","placeHolder","onChange","style","backgroundImage","cina","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2GAAAA,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,2LCkB5BC,MAdf,WACI,OACI,4BAAQC,MAAM,UACV,yBAAKC,IAAKC,IAAMC,OAAO,SACvB,mDACA,yBAAKF,IAAKG,IAAOD,OAAO,W,4DC8BrBE,E,kDAnCX,aAAc,IAAD,8BACT,gBACKC,MAAM,CACPC,OAAQ,GACRC,WAAY,IAEhB,EAAKC,gBAAkB,EAAKA,gBAAgBC,KAArB,gBANd,E,4DAQGC,GACZ,IAAIC,EAAQD,EAAME,OAAOC,MACrBC,EAAOJ,EAAME,OAAOG,KACxBC,KAAKC,SAAL,eACKH,EAAOH,M,+BAIZ,OACI,yBAAKO,UAAU,QACX,sDACA,8BACI,2BAAOC,KAAK,OAAOJ,KAAK,SAASF,MAAOG,KAAKX,MAAMC,OAAQc,YAAY,eAAeC,SAAUL,KAAKR,kBACrG,2BAAOW,KAAK,OAAOJ,KAAK,aAAaF,MAAOG,KAAKX,MAAME,WAAYa,YAAY,eAAeC,SAAUL,KAAKR,kBAC7G,2CAEJ,yBAAKU,UAAU,OAAOI,MAAO,CAACC,gBAAgB,OAAD,OAASC,IAAT,OAEzC,uBAAGN,UAAU,OAAOF,KAAKX,MAAMC,QAC/B,uBAAGY,UAAU,UAAUF,KAAKX,MAAME,kB,GA5BnCkB,IAAMC,W,MCaVC,MATf,WACE,OACE,yBAAKT,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCcU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c49298d1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icona.2619645c.png\";","module.exports = __webpack_public_path__ + \"static/media/cina2.20197d04.png\";","module.exports = __webpack_public_path__ + \"static/media/cina.a9a07d89.jpeg\";","import React from 'react';\nimport logo from './icona.png'\nimport cina2 from './cina2.png'\n\nfunction Header(){\n    return(\n        <header class='titolo'>\n            <img src={logo} height='50px' />\n            <h1>Cina meme generator</h1>\n            <img src={cina2} height='50px' />\n\n        </header>\n    )\n}\n\n\n\n\nexport default Header","import React from 'react'\nimport cina from './cina.jpeg'\n\nclass Main extends React.Component{\n    constructor(){\n        super()\n        this.state={\n            textUp: '',\n            textBottom: ''\n        }\n        this.onChangeHandler = this.onChangeHandler.bind(this)\n    }\n    onChangeHandler(event){\n        let testo = event.target.value;\n        let dove = event.target.name\n        this.setState({\n            [dove]: testo\n        })\n    }   \n    render(){\n        return(\n            <div className='main'>\n                <h1>Genera il tuo CinaMeme</h1>\n                <form>\n                    <input type='text' name='textUp' value={this.state.textUp} placeHolder='QUESTO SOPRA' onChange={this.onChangeHandler}/>\n                    <input type='text' name='textBottom' value={this.state.textBottom} placeHolder='QUESTO SOTTO' onChange={this.onChangeHandler}/>\n                    <button>GENERA</button>\n                </form>\n                <div className='meme' style={{backgroundImage: `url(${cina})`}}>\n                    \n                    <p className=\"top\">{this.state.textUp}</p>\n                    <p className=\"bottom\">{this.state.textBottom}</p>\n                </div>\n            </div>\n        )\n    }\n}\n\n\nexport default Main","import React from 'react';\nimport Header from '../Header/Header';\nimport Main from '../Main/Main'\n\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}